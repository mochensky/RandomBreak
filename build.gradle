plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group
base {
    archivesName = project.archives_base_name
}

def supportedVersions = [
        '1.21': [
                minecraft_version: '1.21',
                yarn_mappings: '1.21+build.9',
                fabric_version: '0.100.7+1.21',
                loader_version: '0.16.7'
        ],
        '1.21.1': [
                minecraft_version: '1.21.1',
                yarn_mappings: '1.21.1+build.3',
                fabric_version: '0.102.0+1.21.1',
                loader_version: '0.16.7'
        ],
        '1.21.4': [
                minecraft_version: '1.21.4',
                yarn_mappings: '1.21.4+build.8',
                fabric_version: '0.119.3+1.21.4',
                loader_version: '0.16.7'
        ]
]

def targetVersion = project.hasProperty('minecraft_version') ? project.minecraft_version : '1.21.4'
def versionConfig = supportedVersions[targetVersion]

if (!versionConfig) {
    throw new GradleException("Unsupported Minecraft version: ${targetVersion}. Supported versions: ${supportedVersions.keySet()}")
}

dependencies {
    minecraft "com.mojang:minecraft:${versionConfig.minecraft_version}"
    mappings "net.fabricmc:yarn:${versionConfig.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${versionConfig.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${versionConfig.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", versionConfig.minecraft_version
    inputs.property "loader_version", versionConfig.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": versionConfig.minecraft_version,
                "loader_version": versionConfig.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name + "-${targetVersion}"
            from components.java
        }
    }
    repositories {
    }
}